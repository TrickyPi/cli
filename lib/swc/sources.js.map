{"version":3,"sources":["../../src/swc/sources.ts"],"sourcesContent":["import glob from \"fast-glob\";\nimport slash from \"slash\";\nimport { stat } from \"fs\";\nimport { join, basename, extname } from \"path\";\nimport { Options } from \"@swc/core\";\n\n/**\n * Find all input files based on source globs\n */\nexport async function globSources(\n  sources: string[],\n  includeDotfiles = false\n): Promise<string[]> {\n  const globConfig = {\n    dot: includeDotfiles,\n    nodir: true,\n  };\n\n  const files = await Promise.all(\n    sources\n      .filter(source => includeDotfiles || !basename(source).startsWith(\".\"))\n      .map(source => {\n        return new Promise<string[]>(resolve => {\n          stat(source, (err, stat) => {\n            if (err) {\n              resolve([]);\n              return;\n            }\n            if (!stat.isDirectory()) {\n              resolve([source]);\n            } else {\n              glob(slash(join(source, \"**\")), globConfig)\n                .then(matches => resolve(matches))\n                .catch(() => resolve([]));\n            }\n          });\n        });\n      })\n  );\n\n  return Array.from(new Set<string>(files.flat()));\n}\n\ntype Split = [compilable: string[], copyable: string[]];\n\n/**\n * Test if a filename ends with a compilable extension.\n */\nexport function isCompilableExtension(\n  filename: string,\n  allowedExtension: string[]\n): boolean {\n  const ext = extname(filename);\n  return allowedExtension.includes(ext);\n}\n\n/**\n * isExclude\n */\nexport function isExclude(filename: string, { exclude }: Options): boolean {\n  if (!exclude) {\n    return false;\n  }\n  if (typeof exclude === \"string\") {\n    return RegExp(exclude).test(filename);\n  }\n  if (exclude instanceof Array) {\n    for (const it of exclude) {\n      if (RegExp(it).test(filename)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nexport function isCompilableFile(\n  filename: string,\n  allowedExtension: string[],\n  swcOptions: Options\n) {\n  return (\n    isCompilableExtension(filename, allowedExtension) &&\n    !isExclude(filename, swcOptions)\n  );\n}\n\n/**\n * Split file list to files that can be compiled and copied\n */\nexport function slitCompilableAndCopyable(\n  files: string[],\n  allowedExtension: string[],\n  swcOptions: Options,\n  copyFiles: boolean\n): Split {\n  const compilable: string[] = [];\n  const copyable: string[] = [];\n\n  for (const file of files) {\n    const isCompilable = isCompilableFile(file, allowedExtension, swcOptions);\n\n    if (isCompilable) {\n      compilable.push(file);\n    } else if (copyFiles) {\n      copyable.push(file);\n    }\n  }\n\n  return [compilable, copyable];\n}\n\nexport async function requireChokidar() {\n  try {\n    const { default: chokidar } = await import(\"chokidar\");\n    return chokidar;\n  } catch (err) {\n    console.error(\n      \"The optional dependency chokidar is not installed and is required for \" +\n        \"--watch. Chokidar is likely not supported on your platform.\"\n    );\n    throw err;\n  }\n}\n\nexport async function watchSources(sources: string[], includeDotfiles = false) {\n  const chokidar = await requireChokidar();\n\n  return chokidar.watch(sources, {\n    ignored: includeDotfiles\n      ? undefined\n      : (filename: string) => basename(filename).startsWith(\".\"),\n    ignoreInitial: true,\n    awaitWriteFinish: {\n      stabilityThreshold: 50,\n      pollInterval: 10,\n    },\n  });\n}\n"],"names":["globSources","isCompilableExtension","isExclude","isCompilableFile","slitCompilableAndCopyable","requireChokidar","watchSources","sources","includeDotfiles","globConfig","dot","nodir","files","Promise","all","filter","source","startsWith","map","resolve","err","stat","isDirectory","then","matches","catch","Array","from","Set","flat","filename","allowedExtension","ext","includes","exclude","RegExp","test","it","swcOptions","copyFiles","compilable","copyable","file","isCompilable","push","default","chokidar","console","error","watch","ignored","undefined","ignoreInitial","awaitWriteFinish","stabilityThreshold","pollInterval"],"mappings":"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"}